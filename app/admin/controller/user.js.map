{
    "version": 3,
    "sources": [
        "../../../src/admin/controller/user.js"
    ],
    "names": [
        "loginAction",
        "username",
        "post",
        "userInfo",
        "model",
        "getOptions",
        "options",
        "two_factor_auth",
        "verified",
        "totp",
        "verify",
        "secret",
        "encoding",
        "token",
        "window",
        "fail",
        "ldapConfig",
        "ldap_on",
        "ldap_url",
        "ldap_connect_timeout",
        "parseInt",
        "ldap_baseDn",
        "ldap_whiteList",
        "split",
        "ldap_user_page",
        "ldap_log",
        "indexOf",
        "think",
        "log",
        "ldapVerify",
        "normalVerify",
        "status",
        "type",
        "session",
        "success",
        "logoutAction",
        "redirect",
        "passwordAction",
        "isEmpty",
        "saveUser",
        "password",
        "id",
        "ip",
        "rows",
        "forgotAction",
        "isPost",
        "user",
        "where",
        "name",
        "email",
        "_logic",
        "find",
        "resetTime",
        "Date",
        "now",
        "resetToken",
        "md5",
        "Math",
        "random",
        "resetUrl",
        "site_url",
        "transporter",
        "createTransport",
        "sendMail",
        "from",
        "to",
        "subject",
        "title",
        "text",
        "cache",
        "timeout",
        "resetAction",
        "findUser",
        "userModel",
        "checkPassword",
        "oripassword",
        "Ldap",
        "service",
        "ldap",
        "validate",
        "ldapRes",
        "getUserInfo",
        "ldapUserInfo",
        "newData",
        "mail",
        "display_name",
        "displayName",
        "userPassword",
        "modelInstance",
        "addUser",
        "insertId",
        "updateData"
    ],
    "mappings": "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",
    "file": "../../../src/admin/controller/user.js",
    "sourcesContent": [
        "'use strict';\nimport nodemailer from 'nodemailer';\nimport speakeasy from 'speakeasy';\nimport Base from './base';\n\nexport default class extends Base {\n  /**\n   * login\n   * @return {} []\n   */\n  async loginAction() {\n    const username = this.post('username');\n    let userInfo = {};\n    let model = this.model('options');\n    let options = await model.getOptions();\n\n    //二步验证\n    if(options.two_factor_auth) {\n      let two_factor_auth = this.post('two_factor_auth');\n      let verified = speakeasy.totp.verify({\n        secret: options.two_factor_auth,\n        encoding: 'base32',\n        token: two_factor_auth,\n        window: 2\n      });\n      if(!verified) {\n        return this.fail('TWO_FACTOR_AUTH_ERROR');\n      }\n    }\n\n    const ldapConfig = {\n      //switch, maybe, default '0', '0' => close, '1' => open\n      ldap_on: options.ldap_on === '1',\n      //ldap url, required，'ldap://xxx.xx.x.xx:xxx'\n      ldap_url: options.ldap_url,\n      // ldap connect timeout, maybe, default 20000ms\n      ldap_connect_timeout: parseInt(options.ldap_connect_timeout),\n      //ldap baseDn, required\n      ldap_baseDn: options.ldap_baseDn,\n      //sep by \",\", accounts in this string will not be varified with LDAP when LDAP is opened\n      //and these accounts can be edited by itself instead of LDAP administrator, required\n      ldap_whiteList: options.ldap_whiteList ? options.ldap_whiteList.split(',') : [],\n      //url for ldap user to change userinfo, maybe, default ''\n      ldap_user_page: options.ldap_user_page,\n      //logconf, maybe, default '1', '0' => close, '1' => open\n      ldap_log: options.ldap_log !== '0'\n    };\n\n    if(ldapConfig.ldap_on && ldapConfig.ldap_whiteList.indexOf(username) === -1) {\n      think.log('LDAP', 'VERIFY TYPE');\n      userInfo = await this.ldapVerify(username, ldapConfig);\n    }else {\n      think.log('NORMAL', 'VERIFY TYPE');\n      userInfo = await this.normalVerify(username);\n    }\n\n    //帐号是否被禁用，且投稿者不允许登录\n    if((userInfo.status | 0) !== 1 || userInfo.type === 3) {\n      return this.fail('ACCOUNT_FORBIDDEN');\n    }\n\n    await this.session('userInfo', userInfo);\n    return this.success();\n  }\n  /**\n   * logout\n   * @return {}\n   */\n  async logoutAction() {\n    await this.session('userInfo', '');\n    return this.redirect('/');\n  }\n\n  /**\n   * update user password\n   */\n  async passwordAction() {\n    let userInfo = await this.session('userInfo') || {};\n    if(think.isEmpty(userInfo)) {\n      return this.fail('USER_NOT_LOGIN');\n    }\n\n    let rows = await this.model('user').saveUser({\n      password: this.post('password'),\n      id: userInfo.id\n    }, this.ip());\n\n    return this.success(rows);\n  }\n\n  async forgotAction() {\n    let userInfo = await this.session('userInfo') || {};\n    if(!think.isEmpty(userInfo)) {\n      return this.success();\n    }\n\n    if(this.isPost()) {\n      let user = this.post('user');\n      user = await this.model('user').where({\n        name: user,\n        email: user,\n        _logic: 'OR'\n      }).find();\n\n      if(think.isEmpty(user)) {\n        return this.fail('查无此人');\n      }\n      if(!user.email) {\n        return this.fail('该用户未设置邮箱，不能使用找回密码功能');\n      }\n\n      let options = await this.model('options').getOptions();\n\n      let resetTime = Date.now();\n      let resetToken = think.md5(user.email + resetTime + Math.random());\n      let resetUrl = options.site_url + `/admin/dashboard?reset=1&token=${resetToken}`;\n\n      let transporter = nodemailer.createTransport();\n      transporter.sendMail({\n        from: 'no-reply@firekylin.org',\n        to: user.email,\n        subject: `【${options.title}】密码重置`,\n        text: `你好，${user.name}，点击 ${resetUrl} 进行密码重置，该地址有效期为 1 小时，请及时修改密码。如果您没有申请过密码重置，请忽略该邮件！`\n      });\n\n      await think.cache(resetToken, user.name, {\n        timeout: 60 * 60 * 1000\n      });\n\n      return this.success();\n    }\n\n    return this.success();\n  }\n\n  async resetAction() {\n    let userInfo = await this.session('userInfo') || {};\n    if(!think.isEmpty(userInfo)) {\n      return this.success();\n    }\n\n    if(this.isPost()) {\n      let {password, token} = this.post();\n\n      let user = await think.cache(token);\n      if(think.isEmpty(user)) {\n        return this.fail('查无此人');\n      }\n\n      let findUser = await this.model('user').where({name: user}).find();\n      if(think.isEmpty(findUser)) {\n        return this.fail('查无此人');\n      }\n\n      let rows = await this.model('user').saveUser({\n        password,\n        id: findUser.id\n      }, this.ip());\n\n      await think.cache(token, null);\n\n      return this.success(rows);\n    }\n\n    return this.success();\n  }\n\n  async normalVerify(username) {\n    //校验帐号和密码\n    let userModel = this.model('user');\n    let userInfo = await userModel.where({name: username}).find();\n    if(think.isEmpty(userInfo)) {\n      return this.fail('ACCOUNT_ERROR');\n    }\n\n    //校验密码\n    let password = this.post('password');\n    if(!userModel.checkPassword(userInfo, password)) {\n      return this.fail('ACCOUNT_ERROR');\n    }\n\n    return userInfo;\n  }\n\n  async ldapVerify(username, ldapConfig) {\n    //ldap校验\n    const oripassword = this.post('oripassword');\n\n    const Ldap = think.service('ldap', 'admin');\n    const ldap = new Ldap(ldapConfig);\n    const ldapRes = await ldap.validate(username, oripassword);\n\n    if(!ldapRes) {\n        return this.fail('ACCOUNT_ERROR');\n    }\n\n    if(ldapRes === 'timeout') {\n        return this.fail('LDAP_CONNECT_TIMEOUT');\n    }\n\n    //ldap校验通过后，在数据库中查询该用户是否存在，若不存在则新增该用户到数据库，若存在则更新用户信息后登录成功\n    //从ldap中获取详细用户信息\n    let ldapUserInfo = await ldap.getUserInfo(username);\n    let newData = {};\n\n    if(!think.isEmpty(ldapUserInfo)) {\n        newData = {\n            username,\n            email: ldapUserInfo.mail,\n            display_name: ldapUserInfo.displayName,\n            password: ldapUserInfo.userPassword,\n            type: 2,\n            status: 1\n        }\n    }\n\n    //校验数据库中帐号是否存在\n    let userModel = this.model('user');\n    let userInfo = await userModel.where({name: username}).find();\n\n    if(think.isEmpty(userInfo)) {\n      //新增该用户到数据库\n\n      let modelInstance = this.model('user');\n      let insertId = await modelInstance.addUser(newData, this.ip());\n\n      think.log(`insertId: ${JSON.stringify(insertId)}`, 'LDAP');\n\n      if(insertId && insertId.type === 'add') {\n          userInfo = await userModel.where({name: username}).find();\n      }\n      if(insertId && insertId.type === 'exist') {\n        return this.fail('ACCOUNT_ERROR');\n      }\n    }else {\n      //更新数据库用户信息\n\n      let updateData = {\n        ...userInfo,\n        email: ldapUserInfo.mail,\n        display_name: ldapUserInfo.displayName,\n        password: ldapUserInfo.userPassword\n      }\n      let modelInstance = this.model('user');\n      let rows = await modelInstance.saveUser(updateData, this.ip());\n\n      think.log(`affectedRows: ${rows}`, 'USERINFO UPDATED');\n\n      if(rows) {\n        userInfo = await userModel.where({name: username}).find();\n      }\n    }\n\n    return userInfo;\n  }\n}\n"
    ]
}