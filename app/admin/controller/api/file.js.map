{
    "version": 3,
    "sources": [
        "../../../../src/admin/controller/api/file.js"
    ],
    "names": [
        "INTERNAL_AREAS",
        "ip2long",
        "ip",
        "multi",
        "longValue",
        "split",
        "forEach",
        "part",
        "i",
        "defaults",
        "strictSSL",
        "rejectUnauthorized",
        "getFileContent",
        "think",
        "promisify",
        "get",
        "writeFileAsync",
        "writeFile",
        "lookupAsync",
        "lookup",
        "ALLOW_EXTS",
        "uploadConfig",
        "__before",
        "getUploadConfig",
        "postAction",
        "config",
        "type",
        "file",
        "post",
        "getUrlFile",
        "fail",
        "message",
        "ext",
        "extWhiteList",
        "serviceImport",
        "name",
        "serviceUpload",
        "path",
        "getAction",
        "serviceExport",
        "success",
        "some",
        "reg",
        "test",
        "originalFilename",
        "model",
        "getOptions",
        "options",
        "upload",
        "service",
        "uploader",
        "run",
        "result",
        "importor",
        "page",
        "category",
        "tag",
        "exporter",
        "download",
        "url",
        "hostname",
        "longIP",
        "start",
        "end",
        "Error",
        "headers",
        "timeout",
        "encoding",
        "catch",
        "resp",
        "indexOf",
        "uploadDir",
        "file_upload_path",
        "join",
        "tmpdir",
        "isDir",
        "mkdir",
        "uploadName",
        "uuid",
        "extname",
        "uploadPath",
        "body",
        "fieldName",
        "basename",
        "size"
    ],
    "mappings": "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",
    "file": "../../../../src/admin/controller/api/file.js",
    "sourcesContent": [
        "import os from 'os';\nimport fs from 'fs';\nimport dns from 'dns';\nimport path from 'path';\nimport {parse} from 'url';\nimport request from 'request';\n\nimport Base from './base';\n\nconst INTERNAL_AREAS = [\n  ['10.0.0.0', '10.255.255.255'],\n  ['172.16.0.0', '172.31.255.255'],\n  ['192.168.0.0', '192.168.255.255'],\n  ['127.0.0.1', '127.255.255.255']\n];\n\nfunction ip2long(ip) {\n  const multi = [0x1000000, 0x10000, 0x100, 1];\n  let longValue = 0;\n  ip.split('.').forEach((part, i) => longValue += part * multi[i]);\n  return longValue;\n}\n\n\nrequest.defaults({\n  strictSSL: false,\n  rejectUnauthorized: false\n});\n\nconst getFileContent = think.promisify(request.get, request);\nconst writeFileAsync = think.promisify(fs.writeFile, fs);\nconst lookupAsync = think.promisify(dns.lookup, dns);\n\nconst ALLOW_EXTS = [\n  /** 图片文件 */\n  /\\.(gif|jpe?g|png|tiff|bmp)$/i,\n  /** 多媒体文件 */\n  /\\.(mp3|wmv|mp4|avi|flv)$/i,\n  /** 常用档案文件 */\n  /\\.(txt|xml|json|docx?|xlsx?|pptx?)/i,\n  /\\.(zip|rar|pdf|gz)/i\n];\n\nexport default class extends Base {\n  uploadConfig = {};\n\n  async __before() {\n    await super.__before();\n    this.uploadConfig = await this.getUploadConfig();\n  }\n\n  async postAction() {\n    let config = this.uploadConfig;\n    let {type} = config;\n    let file;\n\n    /** 处理远程抓取 **/\n    if(this.post('fileUrl')) {\n      try {\n        file = await this.getUrlFile(this.post('fileUrl'));\n      } catch(e) {\n        return this.fail(e.message);\n      }\n    } else {\n      file = this.file('file');\n    }\n    if(!file) { return this.fail('FILE_UPLOAD_ERROR'); }\n\n    /** 检查文件类型 */\n    const ext = this.extWhiteList(file);\n    if(!ext) {\n      return this.fail('FILE_FORMAT_NOT_ALLOWED');\n    }\n\n    /** 处理导入数据 **/\n    if(this.post('importor')) {\n      return this.serviceImport(this.post('importor'), file);\n    }\n\n    // 处理其它上传\n    if(!type) { return this.fail(); }\n    if(type === 'local') {\n      config = {name: this.post('name')};\n    }\n\n    return this.serviceUpload(type, file.path, config);\n  }\n\n  // 导出其他平台数据\n  async getAction() {\n    if(this.get('exporter')) {\n      return this.serviceExport(this.get('exporter'));\n    }\n    return this.success();\n  }\n\n  //MIME过滤\n  extWhiteList(file) {\n    return ALLOW_EXTS.some(reg => reg.test(file.originalFilename));\n  }\n\n  // 获取上传设置\n  async getUploadConfig() {\n    const options = await this.model('options').getOptions();\n    return options.upload;\n  }\n\n  /**\n   * 上传文件\n   */\n  async serviceUpload(service, file, config) {\n    try {\n      const uploader = think.service(`upload/${service}`, 'admin');\n      const result = await (new uploader()).run(file, config);\n      return this.success(result);\n    } catch (e) {\n      return this.fail(e || 'FILE_UPLOAD_ERROR');\n    }\n  }\n\n  /**\n   * 从其他平台导入数据\n   */\n  async serviceImport(service, file) {\n    try {\n      let importor = think.service(`import/${service}`, 'admin');\n      let {post, page, category, tag} = await (new importor(this)).run(file);\n      return this.success(`共导入文章 ${post} 篇，页面 ${page} 页，分类 ${category} 个，标签 ${tag} 个`);\n    } catch(e) {\n      return this.fail(e);\n    }\n  }\n\n  /**\n   * 导出数据到其它平台\n   */\n  async serviceExport(service) {\n    try {\n      let exporter = think.service(`export/${service}`, 'admin');\n      let file = await (new exporter()).run();\n      return this.download(file);\n    } catch(e) {\n      return this.fail(e);\n    }\n  }\n\n  async getUrlFile(url) {\n    let {hostname} = parse(url);\n    if(!/^\\d+\\.\\d+\\.\\d+\\.\\d+/i.test(hostname)) {\n      hostname = await lookupAsync(hostname);\n    }\n    const longIP = ip2long(hostname);\n    for(let [start, end] of INTERNAL_AREAS) {\n      start = ip2long(start);\n      end = ip2long(end);\n      if(longIP>=start && longIP<=end) {\n        throw new Error('URL ILLEGAL');\n      }\n    }\n\n\n    let resp = await getFileContent({\n      url,\n      headers: {\n        'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_2) Chrome/47.0.2526.111 Safari/537.36'\n      },\n      strictSSL: false,\n      timeout: 1000,\n      encoding: 'binary'\n    }).catch(() => { throw new Error('UPLOAD_URL_ERROR'); });\n\n    if(resp.headers['content-type'].indexOf('image') === -1) {\n      throw new Error('UPLOAD_TYPE_ERROR');\n    }\n\n    let uploadDir = this.config('post').file_upload_path;\n    if(!uploadDir) {\n      uploadDir = path.join(os.tmpdir(), 'thinkjs/upload');\n    }\n    if(!think.isDir(uploadDir)) {\n      think.mkdir(uploadDir);\n    }\n\n    let uploadName = think.uuid(20) + path.extname(url);\n    let uploadPath = path.join(uploadDir, uploadName);\n    await writeFileAsync(uploadPath, resp.body, 'binary');\n\n    return {\n      fieldName: 'file',\n      originalFilename: path.basename(url),\n      path: uploadPath,\n      size: resp.headers['content-length']\n    };\n  }\n}\n"
    ]
}