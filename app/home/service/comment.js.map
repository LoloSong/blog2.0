{
    "version": 3,
    "sources": [
        "../../../src/home/service/comment.js"
    ],
    "names": [
        "defaults",
        "strictSSL",
        "rejectUnauthorized",
        "_",
        "get",
        "think",
        "promisify",
        "post",
        "init",
        "args",
        "sync",
        "optionsModel",
        "model",
        "getOptions",
        "options",
        "comment",
        "site_url",
        "name",
        "type",
        "syncFromDisqus",
        "syncFromHyperComments",
        "syncFromDuoshuo",
        "syncFromChangyan",
        "syncFromNetease",
        "syncFromGitalk",
        "getPostData",
        "postModel",
        "setRelation",
        "order",
        "field",
        "select",
        "allPost",
        "keys",
        "map",
        "key",
        "md5",
        "item",
        "pathname",
        "postData",
        "isEmpty",
        "threads",
        "index",
        "ths",
        "slice",
        "length",
        "url",
        "join",
        "catch",
        "response",
        "data",
        "body",
        "match",
        "JSON",
        "parse",
        "counts",
        "promises",
        "comments",
        "id",
        "comment_num",
        "where",
        "update",
        "all",
        "clearPostCache",
        "i",
        "formData",
        "widget_id",
        "href",
        "th",
        "host",
        "form",
        "resp",
        "cm",
        "push",
        "promise",
        "result",
        "sourceId",
        "gtalkConfig",
        "base64Header",
        "Buffer",
        "githubUserName",
        "githubPassWord",
        "toString",
        "owner",
        "headers",
        "commentNum",
        "total_count",
        "items",
        "cache",
        "service",
        "base"
    ],
    "mappings": "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",
    "file": "../../../src/home/service/comment.js",
    "sourcesContent": [
        "'use strict';\n\nimport request from 'request';\n\nrequest.defaults({\n  strictSSL: false,\n  rejectUnauthorized: false\n});\n\nconst _ = {\n  get: think.promisify(request, request),\n  post: think.promisify(request.post, request)\n};\n\nexport default class extends think.service.base {\n  /**\n   * init\n   * @return {}         []\n   */\n  init(...args) {\n    super.init(...args);\n  }\n  /**\n   * sync post comments\n   * @return {[type]} [description]\n   */\n  async sync() {\n    let optionsModel = this.model('options');\n    let options = await optionsModel.getOptions();\n    let comment = options.comment;\n    comment.site_url = options.site_url;\n\n    if (comment.name) {\n      if (comment.type === 'disqus') {\n        return this.syncFromDisqus(comment);\n      } else if (comment.type === 'hypercomments') {\n        return this.syncFromHyperComments(comment);\n      } else if (comment.type === 'duoshuo') {\n        return this.syncFromDuoshuo(comment);\n      } else if (comment.type === 'changyan') {\n        return this.syncFromChangyan(comment);\n      } else if (comment.type === 'netease') {\n        return this.syncFromNetease(comment);\n      } else if (comment.type === 'gitalk') {\n        return this.syncFromGitalk(comment);\n      }\n    }\n  }\n\n  /**\n   * get post data\n   * @return {[type]} [description]\n   */\n  async getPostData() {\n    let postModel = this.model('post');\n    let allPost = await postModel.setRelation(false)\n      .order('create_time DESC')\n      .field('id,pathname,comment_num,type')\n      .select();\n    let keys = {};\n    allPost.map(item => {\n      let key = think.md5(item.pathname);\n      keys[key] = item;\n      return key;\n    });\n    return keys;\n  }\n  /**\n   * sync from disqus\n   * @return {[type]} [description]\n   */\n  async syncFromDisqus(comment) {\n    let postData = await this.getPostData();\n    if (think.isEmpty(postData)) {\n      return;\n    }\n    let threads = Object.keys(postData); //.join('&l=')\n    let index = 0;\n    while (true) { // eslint-disable-line no-constant-condition\n      let ths = threads.slice(index, index + 10);\n      index += 10;\n      if (!ths.length) {\n        return;\n      }\n      let url = `https://${comment.name}.disqus.com/count-data.js?1=${ths.join('&1=')}`;\n      //think.log(`sync comments ${url}`);\n      let response = await _.get(url).catch(() => {});\n      if (!response) {\n        continue;\n      }\n      let data = response.body.match(/DISQUSWIDGETS.displayCount\\(([^\\(\\)]+)\\);/);\n      if (!data) {\n        continue;\n      }\n\n      data = JSON.parse(data[1]).counts;\n      let promises = data.map(item => {\n        if (item.comments === postData[item.id].comment_num) {\n          return;\n        }\n        let id = postData[item.id].id;\n        return this.model('post').where({\n          id: id\n        }).update({\n          comment_num: item.comments\n        });\n      });\n      await Promise.all(promises);\n      if (promises.length) {\n        await this.clearPostCache();\n      }\n    }\n  }\n\n  async syncFromHyperComments(comment) {\n    const postData = await this.getPostData();\n    if (think.isEmpty(postData)) {\n      return;\n    }\n\n    let url = 'https://c1n1.hypercomments.com/api/get_count';\n    let site_url = comment.site_url;\n    if (site_url.slice(-1) !== '/') {\n      site_url = site_url + '/';\n    }\n\n    for (let i in postData) {\n      let post = postData[i];\n      post.url = site_url + (post.type ? 'page/' : 'post/') + post.pathname + '.html';\n    }\n\n    let threads = Object.keys(postData);\n    let index = 0;\n    while (true) { // eslint-disable-line no-constant-condition\n      let ths = threads.slice(index, index + 50);\n      index += 50;\n\n      if (!ths.length) {\n        return;\n      }\n\n      let formData = {\n        data: JSON.stringify({\n          widget_id: comment.name,\n          href: ths.map(th => postData[th].url)\n        }),\n        host: site_url\n      };\n      let resp = await _.post({\n        url,\n        form: formData\n      });\n      let data = JSON.parse(resp.body).data;\n\n      if (!data) {\n        return;\n      }\n\n      let promises = [];\n      for (let i = 0; i < ths.length; i++) {\n        let post = postData[ths[i]];\n        if (data[i].cm === post.comment_num) {\n          continue;\n        }\n\n        let id = post.id;\n        promises.push(\n          this.model('post')\n          .where({\n            id\n          })\n          .update({\n            comment_num: data[i].cm\n          })\n        );\n      }\n\n      await Promise.all(promises);\n      if (promises.length) {\n        await this.clearPostCache();\n      }\n    }\n\n  }\n  /**\n   * sync from duoshuo\n   * @return {[type]} [description]\n   */\n  async syncFromDuoshuo(comment) {\n    let postData = await this.getPostData();\n    if (think.isEmpty(postData)) {\n      return;\n    }\n    let threads = Object.keys(postData);\n    let index = 0;\n    while (true) { // eslint-disable-line no-constant-condition\n      let ths = threads.slice(index, index + 10);\n      index += 10;\n      if (!ths.length) {\n        return;\n      }\n      let url = `http://api.duoshuo.com/threads/counts.json?short_name=${comment.name}&threads=${ths.join(',')}`;\n      //think.log(`sync comments ${url}`);\n      let response = await _.get(url);\n      let data = JSON.parse(response.body).response;\n      let promises = [];\n      for (let key in data) {\n        if (data[key].comments === postData[key].comment_num) {\n          continue;\n        }\n        let id = postData[key].id;\n        let promise = this.model('post').where({\n          id: id\n        }).update({\n          comment_num: data[key].comments\n        });\n        promises.push(promise);\n      }\n      await Promise.all(promises);\n      if (promises.length) {\n        await this.clearPostCache();\n      }\n    }\n  }\n  /**\n   * sync from changyan\n   * @return {[type]} [description]\n   */\n  async syncFromChangyan(comment) {\n    let postData = await this.getPostData();\n    if (think.isEmpty(postData)) {\n      return;\n    }\n    let threads = Object.keys(postData);\n    let index = 0;\n    while (true) { // eslint-disable-line no-constant-condition\n      let ths = threads.slice(index, index + 10);\n      index += 10;\n      if (!ths.length) {\n        return;\n      }\n      let url = `http://changyan.sohu.com/api/2/topic/count?client_id=${comment.name}&topic_id=${ths.join(',')}`;\n      //think.log(`sync comments ${url}`);\n      let response = await _.get(url);\n      let data = JSON.parse(response.body).result;\n      let promises = [];\n      for (let key in data) {\n        if (data[key].comments === postData[key].comment_num) {\n          continue;\n        }\n        let id = postData[key].id;\n        let promise = this.model('post').where({\n          id: id\n        }).update({\n          comment_num: data[key].comments\n        });\n        promises.push(promise);\n      }\n      await Promise.all(promises);\n      if (promises.length) {\n        await this.clearPostCache();\n      }\n    }\n  }\n  /**\n   * sync from duoshuo\n   * @return {[type]} [description]\n   */\n  async syncFromNetease(comment) {\n    let postData = await this.getPostData();\n    if (think.isEmpty(postData)) {\n      return;\n    }\n\n    let site_url = comment.site_url;\n    if (site_url.slice(-1) !== '/') {\n      site_url = site_url + '/';\n    }\n\n    for (let i in postData) {\n      let post = postData[i];\n      post.url = site_url + (post.type ? 'page/' : 'post/') + post.pathname + '.html';\n    }\n\n    let threads = Object.keys(postData);\n    let index = 0;\n    let url = `https://api.gentie.163.com/products/${comment.name}/threads/joincounts`;\n    while (true) { // eslint-disable-line no-constant-condition\n      let ths = threads.slice(index, index + 50);\n      if (!ths.length) {\n        return;\n      }\n      index += 50;\n      // think.log(`sync comments ${url}`);\n      let formData = {\n        data: JSON.stringify(\n          ths.map(th => ({\n            url: postData[th].url,\n            sourceId: null\n          }))\n        )\n      };\n      let resp = await _.post({\n        url,\n        form: formData\n      });\n      let data = JSON.parse(resp.body).data;\n\n      let promises = [];\n      for (let i = 0; i < ths.length; i++) {\n        let post = postData[ths[i]];\n        if (data[i] === post.comment_num) {\n          continue;\n        }\n\n        let id = post.id;\n        promises.push(this.model('post').where({\n          id\n        }).update({\n          comment_num: data[i]\n        }));\n      }\n\n      await Promise.all(promises);\n      if (promises.length) {\n        await this.clearPostCache();\n      }\n    }\n  }\n\n  /**\n   *\n   * @param {*sync form gitalk in github} comment\n   */\n  async syncFromGitalk(comment) {\n\n    const postData = await this.getPostData();\n    if (think.isEmpty(postData)) {\n      return;\n    }\n\n    //get gtalk and github config\n    let gtalkConfig = JSON.parse(comment.name);\n\n    const base64Header = new Buffer(gtalkConfig.githubUserName + ':' + gtalkConfig.githubPassWord).toString('base64');\n\n    let url='https://api.github.com/search/issues?q=author:'+gtalkConfig.owner;\n    const options = {\n      url: url,\n      headers: {\n        'User-Agent': 'request',\n        'Authorization': 'Basic ' + base64Header\n      }\n    };\n\n    let promises = [];\n\n    for (let i in postData) {\n      let post = postData[i];\n      post.url = '/' + (post.type ? 'page/' : 'post/') + post.pathname + '.html';\n      options.url = url+'+label:'+i;\n\n      let response = await _.get(options);\n\n      response = JSON.parse(response.body);\n      let commentNum = 0;\n      if (response && response.total_count===1) {\n        commentNum = response.items[0].comments;\n      } else {\n        commentNum = 0;\n      }\n\n      //update commentNum\n      if (commentNum !== post.comment_num) {\n        let id = post.id;\n        promises.push(this.model('post').where({\n          id\n        }).update({\n          comment_num: commentNum\n        }));\n      }\n    }\n\n    await Promise.all(promises);\n    if (promises.length) {\n      await this.clearPostCache();\n    }\n  }\n\n  clearPostCache() {\n    return think.cache('post_1', null);\n  }\n}\n"
    ]
}