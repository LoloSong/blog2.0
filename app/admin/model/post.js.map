{
    "version": 3,
    "sources": [
        "../../../src/admin/model/post.js"
    ],
    "names": [
        "init",
        "args",
        "relation",
        "tag",
        "think",
        "model",
        "MANY_TO_MANY",
        "cate",
        "user",
        "type",
        "BELONG_TO",
        "field",
        "addPost",
        "data",
        "create_time",
        "datetime",
        "status",
        "update_time",
        "is_public",
        "where",
        "pathname",
        "thenAdd",
        "savePost",
        "id",
        "find",
        "info",
        "isEmpty",
        "reject",
        "Error",
        "update",
        "deletePost",
        "post_id",
        "delete",
        "getCount",
        "userId",
        "user_id",
        "count",
        "getLatest",
        "nums",
        "order",
        "limit",
        "setRelation",
        "select",
        "afterUpdate",
        "options",
        "clearCache",
        "afterDelete",
        "afterAdd",
        "log",
        "cache",
        "updateAllPostSummaries",
        "posts",
        "allPromises",
        "length",
        "i",
        "item",
        "getSummary",
        "markdown_content",
        "summary",
        "push",
        "all",
        "getContentAndSummary",
        "getOptions",
        "postTocManual",
        "auto_summary",
        "parseInt",
        "showToc",
        "test",
        "markdownToHtml",
        "toc",
        "highlight",
        "content",
        "summary_length",
        "hasMoreTag",
        "split",
        "replace",
        "substr",
        "option",
        "markedWithMathJax",
        "service",
        "markedContent",
        "tocContent",
        "a",
        "b",
        "c",
        "generateTocName",
        "language",
        "text",
        "result",
        "highlightAuto",
        "undefined",
        "value",
        "getPostTime",
        "name",
        "trim",
        "toLowerCase",
        "md5",
        "slice"
    ],
    "mappings": "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",
    "file": "../../../src/admin/model/post.js",
    "sourcesContent": [
        "'use strict';\n\nimport marked from 'marked';\nimport toc from 'markdown-toc';\nimport highlight from 'highlight.js';\nimport Base from './base';\n\n/**\n * relation model\n */\nexport default class extends Base {\n  /**\n   * init\n   * @param  {} args []\n   * @return {}         []\n   */\n  init(...args) {\n    super.init(...args);\n\n    this.relation = {\n      tag: think.model.MANY_TO_MANY,\n      cate: think.model.MANY_TO_MANY,\n      user: {\n        type: think.model.BELONG_TO,\n        // fKey: 'user_id',\n        // key: 'display_name',\n        field: 'id,name,display_name'\n      }\n    }\n  }\n\n  /**\n   * 添加文章\n   * @param {[type]} data [description]\n   * @param {[type]} ip   [description]\n   */\n  addPost(data) {\n    let create_time = think.datetime();\n    data = Object.assign({\n      type: 0,\n      status: 0,\n      create_time,\n      update_time: create_time,\n      is_public: 1\n    }, data);\n\n    return this.where({pathname: data.pathname}).thenAdd(data);\n  }\n\n  async savePost(data) {\n    let info = await this.where({id: data.id}).find();\n    if(think.isEmpty(info)) {\n      return Promise.reject(new Error('POST_NOT_EXIST'));\n    }\n    data.update_time = think.datetime();\n    return this.where({id: data.id}).update(data);\n  }\n\n  async deletePost(post_id) {\n    //await this.model('post_cate').delete({post_id});\n    //await this.model('post_tag').delete({post_id});\n    return this.where({id: post_id}).delete();\n  }\n\n  /**\n   * get count posts\n   * @param  {Number} userId []\n   * @return {Promise}        []\n   */\n  getCount(userId) {\n    if(userId) {\n      return this.where({user_id: userId}).count();\n    }\n    return this.count();\n  }\n  /**\n   * get latest posts\n   * @param  {Number} nums []\n   * @return {}      []\n   */\n  getLatest(user_id, nums = 10) {\n    let where = {\n      create_time: {'<=': think.datetime()},\n      is_public: 1, //公开\n      type: 0, //文章\n      status: 3, //已经发布\n    };\n    if(user_id) { where.user_id = user_id; }\n    return this.order('id DESC')\n      .where(where)\n      .limit(nums)\n      .setRelation(false)\n      .order('create_time DESC')\n      .select();\n  }\n\n  async afterUpdate(data, options) {\n    await super.afterUpdate(data, options);\n    return this.clearCache();\n  }\n\n  async afterDelete(data, options) {\n    await super.afterDelete(data, options);\n    return this.clearCache();\n  }\n\n  async afterAdd(data, options) {\n    await super.afterAdd(data, options);\n    return this.clearCache();\n  }\n\n  clearCache() {\n    think.log('clear cache');\n    return think.cache('post_1', null);\n  }\n\n\n  /**\n   * 更新所有文章的摘要信息并重新保存到数据库\n   *\n   * @returns {Promise.<void>}\n   */\n  async updateAllPostSummaries () {\n    // get all posts' id and mark down content\n    const posts = await this.field('id, markdown_content').setRelation(false).select();\n    const allPromises = [];\n\n    if (posts.length > 0) {\n      for (let i = 0; i < posts.length; i++) {\n        const item = posts[i];\n        const summary = await this.getSummary(item.markdown_content);\n\n        allPromises.push(this.where({id: item.id}).update({summary}))\n      }\n\n      await Promise.all(allPromises)\n    }\n  }\n\n\n  /**\n   * 渲染 markdown\n   * 摘要为部分内容时不展示 TOC\n   * 文章正文设置为手动指定 TOC 时不显示\n   * 页面不自动生成 TOC 除非是手动指定了\n   */\n  async getContentAndSummary(data) {\n    const options = await this.model('options').getOptions();\n    const postTocManual = options.postTocManual === '1';\n    const auto_summary = parseInt(options.auto_summary);\n\n    let showToc;\n    if(!postTocManual) {\n      showToc = data.type/1 === 0;\n    } else {\n      showToc = /(?:^|[\\r\\n]+)\\s*\\<\\!--toc--\\>\\s*[\\r\\n]+/i.test(data.markdown_content);\n    }\n    data.content = await this.markdownToHtml(data.markdown_content, {toc: showToc, highlight: true});\n    data.summary = await this.getSummary(data.markdown_content, auto_summary)\n\n    return data;\n  }\n\n\n  /**\n   * 渲染 markdown 并返回摘要内容\n   * 区别于 getContentAndSummary 方法，此方法只处理和返回摘要\n   *\n   * @param markdown_content MarkDown 内容\n   * @param summary_length 摘要长度（可为空）\n   * @return {string}\n   */\n  async getSummary (markdown_content, summary_length) {\n    let summary;\n\n    if (! summary_length) {\n      const options = await this.model('options').getOptions();\n      summary_length = parseInt(options.auto_summary);\n    }\n\n    const hasMoreTag = /(?:^|[\\r\\n]+)\\s*\\<\\!--more--\\>\\s*[\\r\\n]+/i.test(markdown_content);\n\n    if (hasMoreTag || summary_length === 0) {\n      summary = markdown_content.split('<!--more-->')[0];\n      summary = await this.markdownToHtml(summary, {toc: false, highlight: true});\n      summary.replace(/<[>]*>/g, '');\n\n    } else {\n      summary = await this.markdownToHtml(markdown_content, {toc: false, highlight: true});\n      // 过滤掉 HTML 标签 及换行等 并截取所需的长度\n      // 增加过滤 svg 内容\n      summary = summary\n          .replace(/[\\n\\r\\t]/g, '')\n          .replace(/<svg[ >].*?<\\/svg>/g, '')\n          .replace(/<\\/?[^>]*>/g, '')\n          .substr(0, summary_length) + '...';\n    }\n\n    return summary;\n  }\n\n\n  /**\n   * markdown to html\n   * @return {string}\n   */\n  async markdownToHtml(content, option = {toc: true, highlight: true}) {\n\n    // 使用包含 MathJax 解析的 Markdown 引擎解析 MD 文本\n    let markedWithMathJax = think.service('marked-with-mathjax');\n    let markedContent = await markedWithMathJax(content);\n\n    /**\n     * 增加 TOC 目录\n     */\n    if(option.toc) {\n      let tocContent = marked(toc(content).content).replace(/<a\\s+href=\"#([^\\\"]+)\">([^<>]+)<\\/a>/g, (a, b, c) => {\n        return `<a href=\"#${this.generateTocName(c)}\">${c}</a>`;\n      });\n\n      markedContent = markedContent.replace(/<h(\\d)[^<>]*>(.*?)<\\/h\\1>/g, (a, b, c) => {\n        return `<h${b}><a id=\"${this.generateTocName(c)}\" class=\"anchor\" href=\"#${this.generateTocName(c)}\"></a>${c}</h${b}>`;\n      });\n      markedContent = `<div class=\"toc\">${tocContent}</div>${markedContent}`;\n    }\n\n    /**\n     * 增加代码高亮\n     */\n    if(option.highlight) {\n      markedContent = markedContent.replace(/<pre><code\\s*(?:class=\"lang-(\\w+)\")?>([\\s\\S]+?)<\\/code><\\/pre>/mg, (a, language, text) => {\n        text = text.replace(/&#39;/g, '\\'')\n          .replace(/&gt;/g, '>')\n          .replace(/&lt;/g, '<')\n          .replace(/\\&quot;/g, '\"')\n          .replace(/\\&amp;/g, '&');\n        var result = highlight.highlightAuto(text, language ? [language] : undefined);\n        return `<pre><code class=\"hljs lang-${result.language}\">${result.value}</code></pre>`;\n      });\n    }\n\n    return markedContent;\n  }\n\n\n  /**\n   * 获取文章创建时间\n   *\n   * @param data\n   * @returns {*}\n   */\n  getPostTime(data) {\n    data.update_time = think.datetime();\n    if(!data.create_time) {\n      data.create_time = data.update_time;\n    }else{\n      data.create_time = think.datetime(data.create_time);\n    }\n    return data;\n  }\n\n\n  /**\n   * generate toc name\n   * @param  {String} name []\n   * @return {String}      []\n   */\n  generateTocName(name) {\n    name = name.trim()\n      .replace(/\\s+/g, '')\n      .replace(/\\)/g, '')\n      .replace(/[\\(\\,]/g, '-')\n      .toLowerCase();\n    if(/^[\\w\\-]+$/.test(name)) {\n      return name;\n    }\n    return `toc-${think.md5(name).slice(0, 3)}`;\n  }\n}\n"
    ]
}